{"version":3,"sources":["api/types.ts","reportWebVitals.ts","api/todolists-api.ts","features/CommonActions/App.ts","utils/error-utils.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","utils/redux-utils.ts","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/Auth/selectors.ts","features/TodolistsList/TodolistsList.tsx","features/TodolistsList/index.ts","components/ErrorSnackbar/ErrorSnackbar.tsx","app/selectors.ts","features/Auth/Login.tsx","features/Auth/auth-reducer.ts","features/Auth/index.ts","features/Application/application-reducer.ts","features/Application/index.ts","app/App.tsx","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitile","model","authAPI","data","appActions","setAppStatus","createAction","setAppError","handleAsyncServerAppError","thunkAPI","showError","dispatch","error","messages","length","status","rejectWithValue","errors","fieldsErrors","handleAsyncServerNetworkError","message","undefined","fetchTodolists","createAsyncThunk","param","a","res","todolists","removeTodolist","changeTodolistEntityStatus","addTodolist","resultCode","todolist","item","changeTodolistTitle","asyncActions","slice","createSlice","name","initialState","reducers","changeTodolistFilter","state","action","index","findIndex","tl","payload","filter","entityStatus","extraReducers","builder","addCase","fulfilled","map","splice","unshift","actions","fetchTasks","tasks","items","removeTask","addTask","updateTask","getState","task","find","t","apiModel","deadline","description","priority","startDate","asyncTodolistAction","forEach","todoListId","AddItemForm","React","memo","addItem","disabled","useState","setTitle","setError","addItemHandler","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","style","marginLeft","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","useAppDispatch","useDispatch","useActions","useMemo","bindActionCreators","Task","tasksActions","onClickHandler","useCallback","onChangeHandler","checked","Completed","New","onTitleChangeHandler","newValue","className","position","Checkbox","right","top","Delete","fontSize","Todolist","demo","todolistActions","useEffect","addTaskCallback","helper","thunk","resultAction","rejected","match","errorMessage","changeTodolistTitleCallback","onFilterButtonClickHandler","tasksForTodolist","renderFilterButton","buttonFilter","text","Button","Paper","padding","size","paddingTop","selectIsLoggedIn","auth","isLoggedIn","TodolistsList","useSelector","addTodolistCallback","Grid","container","spacing","flexWrap","overflowX","allTodolistTasks","width","to","todolistAsyncActions","todolistsSlice","tasksAsyncActions","tasksSlice","todolistsReducer","reducer","tasksReducer","Alert","elevation","ErrorSnackbar","app","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","selectStatus","selectIsInitialized","isInitialized","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","test","onSubmit","formikHelpers","authActions","login","setFieldError","field","resetForm","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","touched","type","FormControlLabel","control","logout","setIsLoggedIn","authReducer","initializeApp","appReducer","appSlice","App","authSelectors","AppBar","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","from","textAlign","CircularProgress","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","window","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2ce4b6e1.chunk.js","sourcesContent":["export type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type FieldErrorType = {\r\n    field: string\r\n    error: string\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors?: Array<FieldErrorType>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\nexport type GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport type AuthMeResponseType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import axios from 'axios'\r\nimport {\r\n    AuthMeResponseType,\r\n    GetTasksResponse,\r\n    LoginParamsType,\r\n    ResponseType,\r\n    TaskType,\r\n    TodolistType,\r\n    UpdateTaskModelType\r\n} from './types';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '15f7a0a9-64c3-4a6a-9f8f-a55a7d8541a6'\r\n    }\r\n})\r\n\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<ResponseType<{ userId: number }>>('auth/login', data)\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<AuthMeResponseType>>('auth/me')\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>('auth/login')\r\n    },\r\n}","import {createAction} from \"@reduxjs/toolkit\";\r\nimport {RequestStatusType} from \"../Application/application-reducer\";\r\n\r\nconst setAppStatus = createAction<{ status: RequestStatusType }>('app/setAppStatus')\r\nconst setAppError = createAction<{ error: string | null }>('app/setAppError')\r\n\r\nexport const appActions = {\r\n    setAppStatus,\r\n    setAppError\r\n}","import {appActions} from \"../features/CommonActions/App\";\r\nimport {ResponseType} from '../api/types'\r\nimport {AxiosError} from \"axios\";\r\n\r\ntype ThunkAPIType = {\r\n    dispatch: (action: any) => any\r\n    rejectWithValue: Function\r\n}\r\n\r\nexport const handleAsyncServerAppError = <D>(data: ResponseType<D>,\r\n                                             thunkAPI: ThunkAPIType,\r\n                                             showError = true) => {\r\n    if (showError) {\r\n        thunkAPI.dispatch(appActions.setAppError({error: data.messages.length ? data.messages[0] : 'Some error occurred'}))\r\n    }\r\n    thunkAPI.dispatch(appActions.setAppStatus({status: 'failed'}))\r\n    return thunkAPI.rejectWithValue({errors: data.messages, fieldsErrors: data.fieldsErrors})\r\n}\r\nexport const handleAsyncServerNetworkError = (error: AxiosError, thunkAPI: any, showError = true) => {\r\n    if (showError) {\r\n        thunkAPI.dispatch(appActions.setAppError({error: error.message ? error.message : 'Some error occurred'}))\r\n    }\r\n    thunkAPI.dispatch(appActions.setAppStatus({status: 'failed'}))\r\n    return thunkAPI.rejectWithValue({errors: [error.message], fieldsErrors: undefined})\r\n\r\n}\r\n","import {todolistsAPI} from '../../api/todolists-api'\r\nimport {RequestStatusType} from '../Application'\r\nimport {appActions} from '../CommonActions/App'\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {handleAsyncServerAppError, handleAsyncServerNetworkError} from \"../../utils/error-utils\";\r\nimport {TodolistType} from '../../api/types';\r\nimport {ThunkError} from '../../utils/types';\r\n\r\nconst {setAppStatus} = appActions\r\n\r\nconst fetchTodolists = createAsyncThunk<{ todolists: TodolistType[] }, undefined, ThunkError>('todolists/fetchTodolists',\r\n    async (param, thunkAPI) => {\r\n        thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n        try {\r\n            const res = await todolistsAPI.getTodolists()\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return {todolists: res.data}\r\n        } catch (error) {\r\n            return handleAsyncServerNetworkError(error, thunkAPI)\r\n        }\r\n    })\r\nconst removeTodolist = createAsyncThunk<{ id: string }, string, ThunkError>('todolists/removeTodolists',\r\n    async (todolistId, {dispatch, rejectWithValue}) => {\r\n        dispatch(setAppStatus({status: 'loading'}))\r\n        dispatch(changeTodolistEntityStatus({id: todolistId, status: 'loading'}))\r\n        const res = await todolistsAPI.deleteTodolist(todolistId)\r\n        dispatch(setAppStatus({status: 'succeeded'}))\r\n        return {id: todolistId}\r\n    })\r\nconst addTodolist = createAsyncThunk<{ todolist: TodolistType }, string, ThunkError>('todolists/addTodolists',\r\n    async (title, thunkAPI) => {\r\n        thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n        try {\r\n            const res = await todolistsAPI.createTodolist(title)\r\n            if (res.data.resultCode === 0) {\r\n                thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n                return {todolist: res.data.data.item}\r\n            } else {\r\n                return handleAsyncServerAppError(res.data, thunkAPI, false)\r\n            }\r\n        } catch (error) {\r\n            return handleAsyncServerNetworkError(error, thunkAPI, false)\r\n        }\r\n    })\r\nconst changeTodolistTitle = createAsyncThunk('todolists/changeTodolistTitle',\r\n    async (param: { id: string, title: string }, thunkAPI) => {\r\n        try {\r\n            const res = await todolistsAPI.updateTodolist(param.id, param.title)\r\n            if (res.data.resultCode === 0) {\r\n                thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n                return {id: param.id, title: param.title}\r\n            } else {\r\n                return handleAsyncServerAppError(res.data, thunkAPI)\r\n            }\r\n        } catch (error) {\r\n            return handleAsyncServerNetworkError(error, thunkAPI, false)\r\n        }\r\n    })\r\n\r\nexport const asyncActions = {\r\n    fetchTodolists,\r\n    removeTodolist,\r\n    addTodolist,\r\n    changeTodolistTitle\r\n}\r\n\r\nexport const slice = createSlice({\r\n    name: 'todolists',\r\n    initialState: [] as Array<TodolistDomainType>,\r\n    reducers: {\r\n        changeTodolistFilter(state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].filter = action.payload.filter\r\n        },\r\n        changeTodolistEntityStatus(state, action: PayloadAction<{ id: string, status: RequestStatusType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].entityStatus = action.payload.status\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder\r\n            .addCase(fetchTodolists.fulfilled, (state, action) => {\r\n                return action.payload.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n            })\r\n            .addCase(removeTodolist.fulfilled, (state, action) => {\r\n                const index = state.findIndex(tl => tl.id === action.payload.id)\r\n                if (index > -1) {\r\n                    state.splice(index, 1)\r\n                }\r\n            })\r\n            .addCase(addTodolist.fulfilled, (state, action) => {\r\n                state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\r\n            })\r\n            .addCase(changeTodolistTitle.fulfilled, (state, action) => {\r\n                const index = state.findIndex(tl => tl.id === action.payload.id)\r\n                state[index].title = action.payload.title\r\n            })\r\n    }\r\n})\r\n\r\nexport const {changeTodolistFilter, changeTodolistEntityStatus} = slice.actions\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n","import {todolistsAPI} from '../../api/todolists-api'\r\nimport {appActions} from '../CommonActions/App'\r\nimport {handleAsyncServerAppError, handleAsyncServerNetworkError} from '../../utils/error-utils'\r\nimport {createAsyncThunk, createSlice} from \"@reduxjs/toolkit\";\r\nimport {asyncActions as asyncTodolistAction} from \"./todolists-reducer\";\r\nimport {TaskPriorities, TaskStatuses, TaskType, UpdateTaskModelType} from \"../../api/types\";\r\nimport {AppRootStateType, ThunkError} from \"../../utils/types\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const fetchTasks = createAsyncThunk<{ tasks: TaskType[], todolistId: string }, string, ThunkError>('tasks/fetchTasks', async (todolistId, thunkAPI) => {\r\n    thunkAPI.dispatch(appActions.setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.getTasks(todolistId)\r\n        thunkAPI.dispatch(appActions.setAppStatus({status: 'succeeded'}))\r\n        const tasks = res.data.items\r\n        return {tasks, todolistId}\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\nexport const removeTask = createAsyncThunk<{ taskId: string, todolistId: string }, { taskId: string, todolistId: string }, ThunkError>('tasks/removeTask', async (param, thunkAPI) => {\r\n    const res = await todolistsAPI.deleteTask(param.todolistId, param.taskId)\r\n    return {taskId: param.taskId, todolistId: param.todolistId}\r\n})\r\nexport const addTask = createAsyncThunk<TaskType, { title: string, todolistId: string }, ThunkError>('tasks/addTask',\r\n    async (param, thunkAPI) => {\r\n        thunkAPI.dispatch(appActions.setAppStatus({status: 'loading'}))\r\n        try {\r\n            const res = await todolistsAPI.createTask(param.todolistId, param.title)\r\n            if (res.data.resultCode === 0) {\r\n                thunkAPI.dispatch(appActions.setAppStatus({status: 'succeeded'}))\r\n                return res.data.data.item\r\n            } else {\r\n                handleAsyncServerAppError(res.data, thunkAPI, false);\r\n                return thunkAPI.rejectWithValue({errors: res.data.messages, fieldsErrors: res.data.fieldsErrors})\r\n            }\r\n        } catch (error) {\r\n            return handleAsyncServerNetworkError(error, thunkAPI, false)\r\n        }\r\n    })\r\nexport const updateTask = createAsyncThunk('tasks/updateTask', async (param: { taskId: string, model: UpdateDomainTaskModelType, todolistId: string }, thunkAPI) => {\r\n    const state = thunkAPI.getState() as AppRootStateType\r\n    const task = state.tasks[param.todolistId].find(t => t.id === param.taskId)\r\n    if (!task) {\r\n        return thunkAPI.rejectWithValue('task not found in the state')\r\n    }\r\n\r\n    const apiModel: UpdateTaskModelType = {\r\n        deadline: task.deadline,\r\n        description: task.description,\r\n        priority: task.priority,\r\n        startDate: task.startDate,\r\n        title: task.title,\r\n        status: task.status,\r\n        ...param.model\r\n    }\r\n\r\n    const res = await todolistsAPI.updateTask(param.todolistId, param.taskId, apiModel)\r\n    try {\r\n        if (res.data.resultCode === 0) {\r\n            return param\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI)\r\n        }\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\n\r\nexport const asyncActions = {\r\n    fetchTasks,\r\n    removeTask,\r\n    addTask,\r\n    updateTask\r\n}\r\n\r\nexport const slice = createSlice({\r\n    name: 'tasks',\r\n    initialState: initialState,\r\n    reducers: {},\r\n    extraReducers: (builder) => {\r\n        builder\r\n            .addCase(asyncTodolistAction.addTodolist.fulfilled, (state, action) => {\r\n                state[action.payload.todolist.id] = []\r\n            })\r\n            .addCase(asyncTodolistAction.removeTodolist.fulfilled, (state, action) => {\r\n                delete state[action.payload.id]\r\n            })\r\n            .addCase(asyncTodolistAction.fetchTodolists.fulfilled, (state, action) => {\r\n                action.payload.todolists.forEach((tl: any) => {\r\n                    state[tl.id] = []\r\n                })\r\n            })\r\n            .addCase(fetchTasks.fulfilled, (state, action) => {\r\n                state[action.payload.todolistId] = action.payload.tasks\r\n            })\r\n            .addCase(removeTask.fulfilled, (state, action) => {\r\n                const tasks = state[action.payload.todolistId]\r\n                const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n                if (index > -1) {\r\n                    tasks.splice(index, 1)\r\n                }\r\n            })\r\n            .addCase(addTask.fulfilled, (state, action) => {\r\n                state[action.payload.todoListId].unshift(action.payload)\r\n            })\r\n            .addCase(updateTask.fulfilled, (state, action) => {\r\n                const tasks = state[action.payload.todolistId]\r\n                const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n                if (index > -1) {\r\n                    tasks[index] = {...tasks[index], ...action.payload.model}\r\n                }\r\n            })\r\n    }\r\n})\r\n\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\nexport type AddItemFormSubmitHelperType = {\r\n    setError: (error: string) => void\r\n    setTitle: (title: string) => void\r\n}\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string, helper: AddItemFormSubmitHelperType) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({addItem, disabled = false}: AddItemFormPropsType) {\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = async () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title, {setError, setTitle})\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled} style={{marginLeft: '5px'}}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import {useDispatch} from \"react-redux\";\r\nimport {ActionCreatorsMapObject, bindActionCreators} from \"redux\";\r\nimport {useMemo} from \"react\";\r\nimport {AppDispatchType} from \"./types\";\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatchType>()\r\n\r\nexport function useActions<T extends ActionCreatorsMapObject<any>>(actions: T) {\r\n    const dispatch = useAppDispatch()\r\n    const boundActions = useMemo(() => {\r\n        return bindActionCreators(actions, dispatch)\r\n    }, [])\r\n    return boundActions\r\n}","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {tasksActions} from \"../../index\";\r\nimport {useActions} from \"../../../../utils/redux-utils\";\r\nimport {TaskStatuses, TaskType} from \"../../../../api/types\";\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n}\r\n\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n\r\n    const {removeTask, updateTask} = useActions(tasksActions)\r\n\r\n    const onClickHandler = useCallback(() => {\r\n        removeTask({taskId: props.task.id, todolistId: props.todolistId})\r\n    }, [props.task.id, props.todolistId]);\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        updateTask({\r\n            taskId: props.task.id,\r\n            model: {status: e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New},\r\n            todolistId: props.todolistId\r\n        })\r\n    }, [props.task.id, props.todolistId]);\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        updateTask({\r\n            taskId: props.task.id,\r\n            model: {title: newValue},\r\n            todolistId: props.todolistId\r\n        })\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}\r\n                style={{position: 'relative'}}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler} style={{position: 'absolute', right: '2px', top: '2px'}}>\r\n            <Delete fontSize='small'/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm, AddItemFormSubmitHelperType} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton, Paper, PropTypes} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {tasksActions, todolistActions} from \"../index\";\r\nimport {TaskStatuses, TaskType} from \"../../../api/types\";\r\nimport {useActions, useAppDispatch} from \"../../../utils/redux-utils\";\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n\r\n    const {fetchTasks} = useActions(tasksActions)\r\n    const {removeTodolist, changeTodolistFilter, changeTodolistTitle} = useActions(todolistActions)\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        fetchTasks(props.todolist.id)\r\n    }, [])\r\n\r\n    const addTaskCallback = useCallback(async (title: string, helper: AddItemFormSubmitHelperType) => {\r\n        let thunk = tasksActions.addTask({title, todolistId: props.todolist.id})\r\n        const resultAction = await dispatch(thunk)\r\n        if (tasksActions.addTask.rejected.match(resultAction)) {\r\n            if (resultAction.payload?.fieldsErrors?.length) {\r\n                const errorMessage = resultAction.payload?.errors[0]\r\n                helper.setError(errorMessage)\r\n            } else {\r\n                helper.setError(\"Some error occurred\")\r\n            }\r\n        } else {\r\n            helper.setTitle('')\r\n        }\r\n    }, [props.todolist.id])\r\n\r\n    const removeTodolistCallback = () => {\r\n        removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitleCallback = useCallback((title: string) => {\r\n        changeTodolistTitle({id: props.todolist.id, title})\r\n    }, [props.todolist.id])\r\n\r\n    const onFilterButtonClickHandler = useCallback((filter: FilterValuesType) => {\r\n        changeTodolistFilter({filter: filter, id: props.todolist.id})\r\n    }, [props.todolist.id])\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    const renderFilterButton = (buttonFilter: FilterValuesType, color: PropTypes.Color, text: string) => {\r\n        return <Button variant={props.todolist.filter === buttonFilter ? 'outlined' : 'text'}\r\n                       onClick={() => onFilterButtonClickHandler(buttonFilter)}\r\n                       color={color}\r\n        >{text}\r\n        </Button>\r\n    }\r\n\r\n    return <Paper style={{padding: '10px', position: 'relative'}}>\r\n        <IconButton\r\n            size={'small'}\r\n            onClick={removeTodolistCallback}\r\n            disabled={props.todolist.entityStatus === 'loading'}\r\n            style={{position: 'absolute', right: '5px', top: '5px'}}>\r\n            <Delete fontSize={'small'}/>\r\n        </IconButton>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitleCallback}/>\r\n        </h3>\r\n        <AddItemForm addItem={addTaskCallback} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}/>)\r\n            }\r\n            {!tasksForTodolist.length && <div style={{padding: '10px', color: 'grey'}}>No tasks</div>}\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            {renderFilterButton('all', 'default', 'All')}\r\n            {renderFilterButton('active', 'primary', 'Active')}\r\n            {renderFilterButton('completed', 'secondary', 'Completed')}\r\n        </div>\r\n    </Paper>\r\n})","import {AppRootStateType} from \"../../utils/types\";\r\n\r\nexport const selectIsLoggedIn = (state: AppRootStateType) => state.auth.isLoggedIn\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useSelector} from 'react-redux'\r\nimport {TodolistDomainType} from './todolists-reducer'\r\nimport {TasksStateType,} from './tasks-reducer'\r\nimport {Grid} from '@material-ui/core'\r\nimport {AddItemForm, AddItemFormSubmitHelperType} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {selectIsLoggedIn} from \"../Auth/selectors\";\r\nimport {todolistActions} from \"./index\";\r\nimport {AppRootStateType} from \"../../utils/types\";\r\nimport {useActions, useAppDispatch} from \"../../utils/redux-utils\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector(selectIsLoggedIn)\r\n\r\n    const {fetchTodolists} = useActions(todolistActions)\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n    const addTodolistCallback = useCallback(async (title: string, helper: AddItemFormSubmitHelperType) => {\r\n        let thunk = todolistActions.addTodolist(title)\r\n        const resultAction = await dispatch(thunk)\r\n        if (todolistActions.addTodolist.rejected.match(resultAction)) {\r\n            if (resultAction.payload?.fieldsErrors?.length) {\r\n                const errorMessage = resultAction.payload?.errors[0]\r\n                helper.setError(errorMessage)\r\n            } else {\r\n                helper.setError(\"Some error occurred\")\r\n            }\r\n        } else {\r\n            helper.setTitle('')\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return;\r\n        }\r\n        fetchTodolists()\r\n    }, [])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolistCallback}/>\r\n        </Grid>\r\n        <Grid container spacing={3} style={{flexWrap: 'nowrap', overflowX: 'scroll'}}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <div style={{width: '300px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                demo={demo}\r\n                            />\r\n                        </div>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import {asyncActions as tasksAsyncActions, slice as tasksSlice} from \"./tasks-reducer\";\r\nimport {asyncActions as todolistAsyncActions, slice as todolistsSlice} from './todolists-reducer'\r\nimport {TodolistsList} from \"./TodolistsList\";\r\n\r\nconst todolistActions = {\r\n    ...todolistAsyncActions,\r\n    ...todolistsSlice.actions\r\n}\r\nconst tasksActions = {\r\n    ...tasksAsyncActions,\r\n    ...tasksSlice.actions\r\n}\r\nconst todolistsReducer = todolistsSlice.reducer\r\nconst tasksReducer = tasksSlice.reducer\r\n\r\nexport {\r\n    tasksActions,\r\n    todolistActions,\r\n    TodolistsList,\r\n    todolistsReducer,\r\n    tasksReducer\r\n}","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useSelector} from 'react-redux'\r\nimport {appActions} from '../../features/CommonActions/App'\r\nimport {AppRootStateType} from \"../../utils/types\";\r\nimport {useActions} from \"../../utils/redux-utils\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n    const {setAppError} = useActions(appActions)\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        setAppError({error: null})\r\n    }\r\n\r\n    const isOpen = error !== null;\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import {AppRootStateType} from \"../utils/types\";\r\n\r\nexport const selectStatus = (state: AppRootStateType) => state.app.status\r\nexport const selectIsInitialized = (state: AppRootStateType) => state.app.isInitialized","import React from 'react'\r\nimport {Button, Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, Grid, TextField} from '@material-ui/core'\r\nimport {FormikHelpers, useFormik} from 'formik';\r\nimport {useSelector} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {selectIsLoggedIn} from \"./selectors\";\r\nimport {authActions} from \"./index\";\r\nimport {useAppDispatch} from \"../../utils/redux-utils\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\ntype FormikValuesType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n    const isLoggedIn = useSelector(selectIsLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Поле email не может быть пустым';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Пароль должен быть больше 3 символов';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: async (values: FormikValuesType, formikHelpers: FormikHelpers<FormikValuesType>) => {\r\n            const action = await dispatch(authActions.login(values))\r\n            if (authActions.login.rejected.match(action)) {\r\n                if (action.payload?.fieldsErrors?.length) {\r\n                    const error = action.payload?.fieldsErrors[0]\r\n                    formikHelpers.setFieldError(error.field, error.error)\r\n                }\r\n            }\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}>here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email &&\r\n                        <div style={{color: 'red'}}>{formik.errors.email}</div>}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.touched.email && formik.errors.password &&\r\n                        <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps('rememberMe')}\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import {authAPI} from \"../../api/todolists-api\";\r\nimport {handleAsyncServerAppError, handleAsyncServerNetworkError} from \"../../utils/error-utils\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {FieldErrorType, LoginParamsType} from \"../../api/types\";\r\nimport {appActions} from \"../CommonActions/App\";\r\n\r\nconst {setAppStatus} = appActions\r\n\r\nexport const login = createAsyncThunk<undefined, LoginParamsType, {\r\n    rejectValue: { errors: Array<string>, fieldsErrors?: Array<FieldErrorType> }\r\n}>('auth/login', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.login(param)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI);\r\n        }\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\nexport const logout = createAsyncThunk('auth/logout', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.logout()\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI);\r\n        }\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\n\r\nexport const asyncActions = {\r\n    login,\r\n    logout\r\n}\r\n\r\nexport const slice = createSlice({\r\n    name: 'auth',\r\n    initialState: {\r\n        isLoggedIn: false\r\n    },\r\n    reducers: {\r\n        setIsLoggedIn(state, action: PayloadAction<{ value: boolean }>) {\r\n            state.isLoggedIn = action.payload.value\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder\r\n            .addCase(login.fulfilled, (state) => {\r\n                state.isLoggedIn = true\r\n            })\r\n            .addCase(logout.fulfilled, (state) => {\r\n                state.isLoggedIn = false\r\n            })\r\n    }\r\n})\r\n\r\nexport const authReducer = slice.reducer\r\nexport const {setIsLoggedIn} = slice.actions","import * as authSelectors from './selectors'\r\nimport {Login} from './Login';\r\nimport {asyncActions, slice} from \"./auth-reducer\";\r\n\r\nconst authActions = {\r\n    ...asyncActions,\r\n    ...slice.actions\r\n}\r\n\r\nconst authReducer = slice.reducer\r\n\r\nexport {\r\n    authSelectors,\r\n    Login,\r\n    authActions,\r\n    authReducer\r\n}","import {authAPI} from \"../../api/todolists-api\";\r\nimport {authActions} from \"../Auth\";\r\nimport {createAsyncThunk, createSlice} from \"@reduxjs/toolkit\";\r\nimport {appActions} from \"../CommonActions/App\";\r\n\r\nconst initializeApp = createAsyncThunk('application/initializeApp', async (param, {dispatch}) => {\r\n    const res = await authAPI.me()\r\n    if (res.data.resultCode === 0) {\r\n        dispatch(authActions.setIsLoggedIn({value: true}));\r\n    } else {\r\n    }\r\n})\r\n\r\nexport const asyncActions = {\r\n    initializeApp\r\n}\r\n\r\nexport const slice = createSlice({\r\n    name: 'app',\r\n    initialState: {\r\n        status: 'idle',\r\n        error: null,\r\n        isInitialized: false\r\n    } as InitialStateType,\r\n    reducers: {},\r\n    extraReducers: builder => {\r\n        builder\r\n            .addCase(initializeApp.fulfilled, (state) => {\r\n                state.isInitialized = true\r\n            })\r\n            .addCase(appActions.setAppStatus, (state, action) => {\r\n                state.status = action.payload.status\r\n            })\r\n            .addCase(appActions.setAppError, (state, action) => {\r\n                state.error = action.payload.error\r\n            })\r\n    }\r\n})\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    status: string,\r\n    error: string | null,\r\n    isInitialized: boolean\r\n}","import * as appSelectors from '../../app/selectors'\r\nimport {slice as appSlice, RequestStatusType as T1} from './application-reducer'\r\nimport {asyncActions} from './application-reducer'\r\n\r\nconst appReducer = appSlice.reducer\r\nconst actions = appSlice.actions\r\nconst appActions = {\r\n    ...actions,\r\n    ...asyncActions\r\n}\r\n\r\nexport type RequestStatusType = T1\r\n\r\nexport {\r\n    appSelectors,\r\n    appReducer,\r\n    appActions\r\n}","import React, {useEffect} from 'react'\r\nimport './App.css'\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from '@material-ui/core'\r\nimport {Menu} from '@material-ui/icons'\r\nimport {TodolistsList} from '../features/TodolistsList'\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {useSelector} from 'react-redux'\r\nimport {appActions} from '../features/Application'\r\nimport {Redirect, Route, Switch} from 'react-router-dom'\r\nimport {selectIsInitialized, selectStatus} from \"./selectors\";\r\nimport {authActions, authSelectors, Login} from \"../features/Auth\";\r\nimport {useActions} from \"../utils/redux-utils\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n\r\n    const isInitialized = useSelector(selectIsInitialized)\r\n    const status = useSelector(selectStatus)\r\n    const isLoggedIn = useSelector(authSelectors.selectIsLoggedIn)\r\n\r\n    const {logout} = useActions(authActions)\r\n    const {initializeApp} = useActions(appActions)\r\n\r\n    useEffect(() => {\r\n        if (!demo) {\r\n            initializeApp()\r\n        }\r\n    })\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n    const logoutHandler = () => {\r\n        logout()\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Logout</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Switch>\r\n                    <Route exact path={'/'} render={() => <TodolistsList demo={demo}/>}/>\r\n                    <Route path={'/login'} render={() => <Login/>}/>\r\n                    <Route path={'/404'} render={() => <h1>404: PAGE NOT FOUND</h1>}/>\r\n                    <Redirect from={'*'} to={'/404'}/>\r\n                </Switch>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import {tasksReducer, todolistsReducer} from '../features/TodolistsList';\r\nimport {combineReducers} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from '../features/Application'\r\nimport {authReducer} from \"../features/Auth\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\n\r\nexport const rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: (getDefaultMiddleware) => getDefaultMiddleware().prepend(thunkMiddleware)\r\n})\r\n\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport App from './app/App';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './app/store';\r\nimport {HashRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <HashRouter>\r\n                <App/>\r\n            </HashRouter>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}