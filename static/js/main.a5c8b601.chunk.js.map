{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","utils/error-utils.ts","features/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitile","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","error","setAppStatusAC","status","handleServerNetworkError","message","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","state","action","payload","value","authReducer","reducer","actions","isInitialized","setAppInitializedAC","appReducer","removeTodolistAC","index","findIndex","tl","splice","addTodolistAC","unshift","todolist","filter","entityStatus","changeTodolistTitleAC","changeTodolistFilterAC","changeTodolistEntityStatusAC","setTodolistsAC","todolists","map","todolistsReducer","removeTaskAC","tasks","t","addTaskAC","task","todoListId","updateTaskAC","setTasksAC","extraReducers","builder","addCase","forEach","tasksReducer","updateTaskTC","getState","find","apiModel","deadline","description","priority","startDate","res","resultCode","catch","console","warn","AddItemForm","React","memo","addItem","disabled","log","useState","setTitle","setError","addItemHandler","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","demo","useDispatch","useEffect","thunk","items","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","removeTodolist","style","paddingTop","Button","TodolistsList","useSelector","auth","removeTaskTC","item","addTaskTC","changeStatus","newTitle","changeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","allTodolistTasks","Paper","to","Alert","elevation","ErrorSnackbar","app","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","touched","type","FormControlLabel","control","App","finally","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","from","top","textAlign","width","CircularProgress","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","window","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a5c8b601.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '15f7a0a9-64c3-4a6a-9f8f-a55a7d8541a6'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        const promise = instance.get<TodolistType[]>('todo-lists');\r\n        return promise;\r\n    },\r\n    createTodolist(title: string) {\r\n        const promise = instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n        return promise;\r\n    },\r\n    deleteTodolist(id: string) {\r\n        const promise = instance.delete<ResponseType>(`todo-lists/${id}`);\r\n        return promise;\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        const promise = instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n        return promise;\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<ResponseType<{ userId: number }>>('auth/login', data)\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<AuthMeResponseType>>('auth/me')\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>('auth/login')\r\n    },\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\ntype AuthMeResponseType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({error: data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppErrorAC({error: 'Some error occurred'}))\r\n    }\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppErrorAC({error: error.message ? error.message : 'Some error occurred'}))\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n","import {Dispatch} from 'redux'\r\nimport {setAppStatusAC} from '../app/app-reducer'\r\nimport {authAPI, LoginParamsType} from \"../api/todolists-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'auth',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setIsLoggedInAC(state, action: PayloadAction<{value: boolean}>) {\r\n            state.isLoggedIn = action.payload.value\r\n        }\r\n    }\r\n})\r\nexport const authReducer = slice.reducer\r\nexport const {setIsLoggedInAC} = slice.actions\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    authAPI.login(data)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({value: true}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({value: false}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/todolists-api\";\r\nimport {setIsLoggedInAC} from \"../features/auth-reducer\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n    status: 'idle',\r\n    error: null as string | null,\r\n    isInitialized: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'app',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setAppStatusAC(state, action: PayloadAction<{ status: RequestStatusType }>) {\r\n            state.status = action.payload.status\r\n        },\r\n        setAppErrorAC(state, action: PayloadAction<{ error: string | null }>) {\r\n            state.error = action.payload.error\r\n        },\r\n        setAppInitializedAC(state, action: PayloadAction<{ isInitialized: boolean }>) {\r\n            state.isInitialized = action.payload.isInitialized\r\n        }\r\n    }\r\n})\r\nexport const appReducer = slice.reducer\r\nexport const {setAppStatusAC, setAppErrorAC, setAppInitializedAC} = slice.actions\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({value: true}));\r\n            } else {\r\n            }\r\n        })\r\n        .finally(() => {\r\n            dispatch(setAppInitializedAC({isInitialized: true}));\r\n        })\r\n}\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RequestStatusType, setAppStatusAC} from '../../app/app-reducer'\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nconst slice = createSlice({\r\n    name: 'todolists',\r\n    initialState: initialState,\r\n    reducers: {\r\n        removeTodolistAC(state, action: PayloadAction<{id: string}>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            if(index > -1){\r\n                state.splice(index, 1)\r\n            }\r\n        },\r\n        addTodolistAC(state, action: PayloadAction<{todolist: TodolistType}>) {\r\n            state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\r\n        },\r\n        changeTodolistTitleAC(state, action: PayloadAction<{id: string, title: string}>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].title = action.payload.title\r\n        },\r\n        changeTodolistFilterAC(state, action: PayloadAction<{id: string, filter: FilterValuesType}>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].filter = action.payload.filter\r\n        },\r\n        changeTodolistEntityStatusAC(state, action: PayloadAction<{id: string, status: RequestStatusType}>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].entityStatus = action.payload.status\r\n        },\r\n        setTodolistsAC(state, action: PayloadAction<{todolists: Array<TodolistType>}>) {\r\n            return action.payload.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        }\r\n    }\r\n})\r\nexport const todolistsReducer = slice.reducer\r\nexport const {\r\n    removeTodolistAC,\r\n    addTodolistAC,\r\n    changeTodolistTitleAC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistEntityStatusAC,\r\n    setTodolistsAC\r\n} = slice.actions\r\n\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC({todolists: res.data}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        dispatch(changeTodolistEntityStatusAC({id: todolistId, status: 'loading'}))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC({id: todolistId}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC({todolist: res.data.data.item}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC({id: id, title: title}))\r\n            })\r\n    }\r\n}\r\n\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n","import {\r\n    addTodolistAC,\r\n    removeTodolistAC,\r\n    setTodolistsAC,\r\n} from './todolists-reducer'\r\nimport {\r\n    TaskPriorities,\r\n    TaskStatuses,\r\n    TaskType,\r\n    todolistsAPI,\r\n    UpdateTaskModelType\r\n} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppStatusAC} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nconst slice = createSlice({\r\n    name: 'tasks',\r\n    initialState: initialState,\r\n    reducers: {\r\n        removeTaskAC(state, action: PayloadAction<{taskId: string, todolistId: string}>) {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if(index > -1){\r\n                tasks.splice(index, 1)\r\n            }\r\n        },\r\n        addTaskAC(state, action: PayloadAction<{task: TaskType}>) {\r\n            state[action.payload.task.todoListId].unshift(action.payload.task)\r\n        },\r\n        updateTaskAC(state, action: PayloadAction<{taskId: string, model: UpdateDomainTaskModelType, todolistId: string}>) {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if(index > -1){\r\n                tasks[index] = {...tasks[index], ...action.payload.model}\r\n            }\r\n        },\r\n        setTasksAC(state, action: PayloadAction<{tasks: Array<TaskType>, todolistId: string}>) {\r\n            state[action.payload.todolistId] = action.payload.tasks\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(addTodolistAC, (state, action) => {\r\n            state[action.payload.todolist.id] = []\r\n        })\r\n        builder.addCase(removeTodolistAC, (state, action) => {\r\n            delete state[action.payload.id]\r\n        })\r\n        builder.addCase(setTodolistsAC, (state, action) => {\r\n            action.payload.todolists.forEach(tl => {\r\n                state[tl.id] = []\r\n            })\r\n        })\r\n    }\r\n})\r\nexport const tasksReducer = slice.reducer\r\nexport const {removeTaskAC, addTaskAC, updateTaskAC, setTasksAC} = slice.actions\r\n\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC({tasks, todolistId}))\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC({taskId, todolistId})\r\n            dispatch(action)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC({task})\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...model\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC({taskId, model, todolistId})\r\n                    dispatch(action)\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log(\"EditableSpan called\");\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return;\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC({id: todolistId, filter: value})\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    if(!isLoggedIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppErrorAC} from '../../app/app-reducer'\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    //const [open, setOpen] = React.useState(true)\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC({error: null}));\r\n    }\r\n\r\n\r\n    const isOpen = error !== null;\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useFormik} from 'formik';\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../app/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Поле email не может быть пустым';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Пароль должен быть больше 3 символов';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    if(isLoggedIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}>here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email && <div style={{color: 'red'}}>{formik.errors.email}</div>}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.touched.email && formik.errors.password && <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps('rememberMe')}\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {useEffect} from 'react'\r\nimport './App.css'\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from '@material-ui/core'\r\nimport {Menu} from '@material-ui/icons'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from './store'\r\nimport {initializeAppTC, RequestStatusType} from './app-reducer'\r\nimport { Redirect, Route, Switch } from 'react-router-dom'\r\nimport { Login } from '../features/Login'\r\nimport {logoutTC} from \"../features/auth-reducer\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n    const status = useSelector<AppRootStateType, string>((state) => state.app.status)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    })\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n    const logoutHandler = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n\r\n    return (\r\n            <div className=\"App\">\r\n                <ErrorSnackbar />\r\n                <AppBar position=\"static\">\r\n                    <Toolbar>\r\n                        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                            <Menu/>\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\">\r\n                            News\r\n                        </Typography>\r\n                        {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Logout</Button>}\r\n                    </Toolbar>\r\n                    { status === 'loading' &&  <LinearProgress /> }\r\n                </AppBar>\r\n                <Container fixed>\r\n                    <Switch>\r\n                        <Route exact path={'/'} render={ () => <TodolistsList demo={demo}/> }/>\r\n                        <Route path={'/login'} render={ () => <Login/> }/>\r\n                        <Route path={ '/404' } render={ () => <h1>404: PAGE NOT FOUND</h1> }/>\r\n                        <Redirect from={ '*' } to={ '/404' }/>\r\n                    </Switch>\r\n                </Container>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {combineReducers} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from './app-reducer'\r\nimport {authReducer} from \"../features/auth-reducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: (getDefaultMiddleware) => getDefaultMiddleware().prepend(thunkMiddleware)\r\n})\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport App from './app/App';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './app/store';\r\nimport {HashRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <HashRouter>\r\n                <App/>\r\n            </HashRouter>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}