[{"D:\\react-samurai\\todolist\\src\\app\\App.tsx":"1","D:\\react-samurai\\todolist\\src\\features\\TodolistsList\\tasks-reducer.ts":"2","D:\\react-samurai\\todolist\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx":"3","D:\\react-samurai\\todolist\\src\\utils\\error-utils.ts":"4","D:\\react-samurai\\todolist\\src\\features\\TodolistsList\\Todolist\\Todolist.tsx":"5","D:\\react-samurai\\todolist\\src\\components\\EditableSpan\\EditableSpan.tsx":"6","D:\\react-samurai\\todolist\\src\\reportWebVitals.ts":"7","D:\\react-samurai\\todolist\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx":"8","D:\\react-samurai\\todolist\\src\\app\\store.ts":"9","D:\\react-samurai\\todolist\\src\\features\\TodolistsList\\todolists-reducer.ts":"10","D:\\react-samurai\\todolist\\src\\components\\AddItemForm\\AddItemForm.tsx":"11","D:\\react-samurai\\todolist\\src\\index.tsx":"12","D:\\react-samurai\\todolist\\src\\features\\TodolistsList\\TodolistsList.tsx":"13","D:\\react-samurai\\todolist\\src\\api\\todolists-api.ts":"14","D:\\react-samurai\\todolist\\src\\features\\Auth\\Login.tsx":"15","D:\\react-samurai\\todolist\\src\\features\\Auth\\selectors.ts":"16","D:\\react-samurai\\todolist\\src\\features\\Auth\\index.ts":"17","D:\\react-samurai\\todolist\\src\\features\\TodolistsList\\index.ts":"18","D:\\react-samurai\\todolist\\src\\features\\Auth\\auth-reducer.ts":"19","D:\\react-samurai\\todolist\\src\\utils\\redux-utils.ts":"20","D:\\react-samurai\\todolist\\src\\api\\types.ts":"21","D:\\react-samurai\\todolist\\src\\app\\selectors.ts":"22","D:\\react-samurai\\todolist\\src\\features\\Application\\application-reducer.ts":"23","D:\\react-samurai\\todolist\\src\\features\\Application\\index.ts":"24","D:\\react-samurai\\todolist\\src\\features\\CommonActions\\App.ts":"25"},{"size":2532,"mtime":1624955805961,"results":"26","hashOfConfig":"27"},{"size":5390,"mtime":1624952671459,"results":"28","hashOfConfig":"27"},{"size":1116,"mtime":1624952660164,"results":"29","hashOfConfig":"27"},{"size":1172,"mtime":1624952676879,"results":"30","hashOfConfig":"27"},{"size":4095,"mtime":1624018422393,"results":"31","hashOfConfig":"27"},{"size":913,"mtime":1623953422328,"results":"32","hashOfConfig":"27"},{"size":440,"mtime":1622099317048,"results":"33","hashOfConfig":"27"},{"size":1953,"mtime":1624018314340,"results":"34","hashOfConfig":"27"},{"size":1469,"mtime":1624018221163,"results":"35","hashOfConfig":"27"},{"size":4771,"mtime":1624952683597,"results":"36","hashOfConfig":"27"},{"size":1721,"mtime":1623999193984,"results":"37","hashOfConfig":"27"},{"size":767,"mtime":1622099317048,"results":"38","hashOfConfig":"27"},{"size":2755,"mtime":1624018535832,"results":"39","hashOfConfig":"27"},{"size":1942,"mtime":1624018781865,"results":"40","hashOfConfig":"27"},{"size":4095,"mtime":1624946287719,"results":"41","hashOfConfig":"27"},{"size":139,"mtime":1624022486141,"results":"42","hashOfConfig":"27"},{"size":320,"mtime":1624007507459,"results":"43","hashOfConfig":"27"},{"size":615,"mtime":1624007507319,"results":"44","hashOfConfig":"27"},{"size":2248,"mtime":1624952660110,"results":"45","hashOfConfig":"27"},{"size":511,"mtime":1624955805742,"results":"46","hashOfConfig":"27"},{"size":1320,"mtime":1624018716149,"results":"47","hashOfConfig":"27"},{"size":214,"mtime":1624018801643,"results":"48","hashOfConfig":"27"},{"size":1380,"mtime":1624952660243,"results":"49","hashOfConfig":"27"},{"size":426,"mtime":1624946287871,"results":"50","hashOfConfig":"27"},{"size":353,"mtime":1624950996188,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"aqka83",{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"63"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"63"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"63"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\react-samurai\\todolist\\src\\app\\App.tsx",[],"D:\\react-samurai\\todolist\\src\\features\\TodolistsList\\tasks-reducer.ts",["108"],"D:\\react-samurai\\todolist\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx",["109"],"D:\\react-samurai\\todolist\\src\\utils\\error-utils.ts",[],"D:\\react-samurai\\todolist\\src\\features\\TodolistsList\\Todolist\\Todolist.tsx",["110","111","112","113"],"import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm, AddItemFormSubmitHelperType} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton, Paper, PropTypes} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {tasksActions, todolistActions} from \"../index\";\r\nimport {TaskStatuses, TaskType} from \"../../../api/types\";\r\nimport {useActions, useAppDispatch} from \"../../../utils/redux-utils\";\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n\r\n    const {fetchTasks} = useActions(tasksActions)\r\n    const {removeTodolist, changeTodolistFilter, changeTodolistTitle} = useActions(todolistActions)\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        fetchTasks(props.todolist.id)\r\n    }, [])\r\n\r\n    const addTaskCallback = useCallback(async (title: string, helper: AddItemFormSubmitHelperType) => {\r\n        let thunk = tasksActions.addTask({title, todolistId: props.todolist.id})\r\n        const resultAction = await dispatch(thunk)\r\n        if (tasksActions.addTask.rejected.match(resultAction)) {\r\n            if (resultAction.payload?.fieldsErrors?.length) {\r\n                const errorMessage = resultAction.payload?.errors[0]\r\n                helper.setError(errorMessage)\r\n            } else {\r\n                helper.setError(\"Some error occurred\")\r\n            }\r\n        } else {\r\n            helper.setTitle('')\r\n        }\r\n    }, [props.todolist.id])\r\n\r\n    const removeTodolistCallback = () => {\r\n        removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitleCallback = useCallback((title: string) => {\r\n        changeTodolistTitle({id: props.todolist.id, title})\r\n    }, [props.todolist.id])\r\n\r\n    const onFilterButtonClickHandler = useCallback((filter: FilterValuesType) => {\r\n        changeTodolistFilter({filter: filter, id: props.todolist.id})\r\n    }, [props.todolist.id])\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    const renderFilterButton = (buttonFilter: FilterValuesType, color: PropTypes.Color, text: string) => {\r\n        return <Button variant={props.todolist.filter === buttonFilter ? 'outlined' : 'text'}\r\n                       onClick={() => onFilterButtonClickHandler(buttonFilter)}\r\n                       color={color}\r\n        >{text}\r\n        </Button>\r\n    }\r\n\r\n    return <Paper style={{padding: '10px', position: 'relative'}}>\r\n        <IconButton\r\n            size={'small'}\r\n            onClick={removeTodolistCallback}\r\n            disabled={props.todolist.entityStatus === 'loading'}\r\n            style={{position: 'absolute', right: '5px', top: '5px'}}>\r\n            <Delete fontSize={'small'}/>\r\n        </IconButton>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitleCallback}/>\r\n        </h3>\r\n        <AddItemForm addItem={addTaskCallback} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}/>)\r\n            }\r\n            {!tasksForTodolist.length && <div style={{padding: '10px', color: 'grey'}}>No tasks</div>}\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            {renderFilterButton('all', 'default', 'All')}\r\n            {renderFilterButton('active', 'primary', 'Active')}\r\n            {renderFilterButton('completed', 'secondary', 'Completed')}\r\n        </div>\r\n    </Paper>\r\n})",["114","115"],"D:\\react-samurai\\todolist\\src\\components\\EditableSpan\\EditableSpan.tsx",[],"D:\\react-samurai\\todolist\\src\\reportWebVitals.ts",[],["116","117"],"D:\\react-samurai\\todolist\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx",["118","119","120"],"D:\\react-samurai\\todolist\\src\\app\\store.ts",["121","122","123","124","125"],"D:\\react-samurai\\todolist\\src\\features\\TodolistsList\\todolists-reducer.ts",["126"],"import {todolistsAPI} from '../../api/todolists-api'\r\nimport {RequestStatusType} from '../Application'\r\nimport {appActions} from '../CommonActions/App'\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {\r\n    handleAsyncServerAppError,\r\n    handleAsyncServerNetworkError\r\n} from \"../../utils/error-utils\";\r\nimport {TodolistType} from '../../api/types';\r\nimport {ThunkError} from '../../utils/types';\r\n\r\nconst {setAppStatus} = appActions\r\n\r\nconst fetchTodolists = createAsyncThunk<{ todolists: TodolistType[] }, undefined, ThunkError>('todolists/fetchTodolists',\r\n    async (param, thunkAPI) => {\r\n        thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n        try {\r\n            const res = await todolistsAPI.getTodolists()\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return {todolists: res.data}\r\n        } catch (error) {\r\n            return handleAsyncServerNetworkError(error, thunkAPI)\r\n        }\r\n    })\r\nconst removeTodolist = createAsyncThunk<{ id: string }, string, ThunkError>('todolists/removeTodolists',\r\n    async (todolistId, {dispatch, rejectWithValue}) => {\r\n        dispatch(setAppStatus({status: 'loading'}))\r\n        dispatch(changeTodolistEntityStatus({id: todolistId, status: 'loading'}))\r\n        const res = await todolistsAPI.deleteTodolist(todolistId)\r\n        dispatch(setAppStatus({status: 'succeeded'}))\r\n        return {id: todolistId}\r\n    })\r\nconst addTodolist = createAsyncThunk<{ todolist: TodolistType }, string, ThunkError>('todolists/addTodolists',\r\n    async (title, thunkAPI) => {\r\n        thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n        try {\r\n            const res = await todolistsAPI.createTodolist(title)\r\n            if (res.data.resultCode === 0) {\r\n                thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n                return {todolist: res.data.data.item}\r\n            } else {\r\n                return handleAsyncServerAppError(res.data, thunkAPI, false)\r\n            }\r\n        } catch (error) {\r\n            return handleAsyncServerNetworkError(error, thunkAPI, false)\r\n        }\r\n    })\r\nconst changeTodolistTitle = createAsyncThunk('todolists/changeTodolistTitle',\r\n    async (param: { id: string, title: string }, thunkAPI) => {\r\n        try {\r\n            const res = await todolistsAPI.updateTodolist(param.id, param.title)\r\n            if (res.data.resultCode === 0) {\r\n                thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n                return {id: param.id, title: param.title}\r\n            } else {\r\n                return handleAsyncServerAppError(res.data, thunkAPI)\r\n            }\r\n        } catch (error) {\r\n            return handleAsyncServerNetworkError(error, thunkAPI, false)\r\n        }\r\n    })\r\n\r\nexport const asyncActions = {\r\n    fetchTodolists,\r\n    removeTodolist,\r\n    addTodolist,\r\n    changeTodolistTitle\r\n}\r\n\r\nexport const slice = createSlice({\r\n    name: 'todolists',\r\n    initialState: [] as Array<TodolistDomainType>,\r\n    reducers: {\r\n        changeTodolistFilter(state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].filter = action.payload.filter\r\n        },\r\n        changeTodolistEntityStatus(state, action: PayloadAction<{ id: string, status: RequestStatusType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].entityStatus = action.payload.status\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder\r\n            .addCase(fetchTodolists.fulfilled, (state, action) => {\r\n                return action.payload.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n            })\r\n            .addCase(removeTodolist.fulfilled, (state, action) => {\r\n                const index = state.findIndex(tl => tl.id === action.payload.id)\r\n                if (index > -1) {\r\n                    state.splice(index, 1)\r\n                }\r\n            })\r\n            .addCase(addTodolist.fulfilled, (state, action) => {\r\n                state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\r\n            })\r\n            .addCase(changeTodolistTitle.fulfilled, (state, action) => {\r\n                const index = state.findIndex(tl => tl.id === action.payload.id)\r\n                state[index].title = action.payload.title\r\n            })\r\n    }\r\n})\r\n\r\nexport const {changeTodolistFilter, changeTodolistEntityStatus} = slice.actions\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n","D:\\react-samurai\\todolist\\src\\components\\AddItemForm\\AddItemForm.tsx",[],"D:\\react-samurai\\todolist\\src\\index.tsx",[],"D:\\react-samurai\\todolist\\src\\features\\TodolistsList\\TodolistsList.tsx",["127","128"],"import React, {useCallback, useEffect} from 'react'\r\nimport {useSelector} from 'react-redux'\r\nimport {TodolistDomainType} from './todolists-reducer'\r\nimport {TasksStateType,} from './tasks-reducer'\r\nimport {Grid} from '@material-ui/core'\r\nimport {AddItemForm, AddItemFormSubmitHelperType} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {selectIsLoggedIn} from \"../Auth/selectors\";\r\nimport {todolistActions} from \"./index\";\r\nimport {AppRootStateType} from \"../../utils/types\";\r\nimport {useActions, useAppDispatch} from \"../../utils/redux-utils\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector(selectIsLoggedIn)\r\n\r\n    const {fetchTodolists} = useActions(todolistActions)\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n    const addTodolistCallback = useCallback(async (title: string, helper: AddItemFormSubmitHelperType) => {\r\n        let thunk = todolistActions.addTodolist(title)\r\n        const resultAction = await dispatch(thunk)\r\n        if(todolistActions.addTodolist.rejected.match(resultAction)){\r\n            if(resultAction.payload?.fieldsErrors?.length){\r\n                const errorMessage = resultAction.payload?.errors[0]\r\n                helper.setError(errorMessage)\r\n            } else {\r\n                helper.setError(\"Some error occurred\")\r\n            }\r\n        } else {\r\n            helper.setTitle('')\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return;\r\n        }\r\n        fetchTodolists()\r\n    }, [])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolistCallback}/>\r\n        </Grid>\r\n        <Grid container spacing={3} style={{flexWrap: 'nowrap', overflowX: 'scroll'}}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <div style={{width: '300px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                demo={demo}\r\n                            />\r\n                        </div>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","D:\\react-samurai\\todolist\\src\\api\\todolists-api.ts",[],"D:\\react-samurai\\todolist\\src\\features\\Auth\\Login.tsx",["129"],"import React from 'react'\r\nimport {Button, Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, Grid, TextField} from '@material-ui/core'\r\nimport {FormikHelpers, useFormik} from 'formik';\r\nimport {useSelector} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {selectIsLoggedIn} from \"./selectors\";\r\nimport {authActions} from \"./index\";\r\nimport {useAppDispatch} from \"../../utils/redux-utils\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\ntype FormikValuesType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n    const isLoggedIn = useSelector(selectIsLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Поле email не может быть пустым';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Пароль должен быть больше 3 символов';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: async (values: FormikValuesType, formikHelpers: FormikHelpers<FormikValuesType>) => {\r\n            const action = await dispatch(authActions.login(values))\r\n            if(authActions.login.rejected.match(action)){\r\n                if(action.payload?.fieldsErrors?.length){\r\n                    const error = action.payload?.fieldsErrors[0]\r\n                    formikHelpers.setFieldError(error.field, error.error)\r\n                }\r\n            }\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    if(isLoggedIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}>here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email && <div style={{color: 'red'}}>{formik.errors.email}</div>}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.touched.email && formik.errors.password && <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps('rememberMe')}\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","D:\\react-samurai\\todolist\\src\\features\\Auth\\selectors.ts",[],"D:\\react-samurai\\todolist\\src\\features\\Auth\\index.ts",[],"D:\\react-samurai\\todolist\\src\\features\\TodolistsList\\index.ts",[],"D:\\react-samurai\\todolist\\src\\features\\Auth\\auth-reducer.ts",[],"D:\\react-samurai\\todolist\\src\\utils\\redux-utils.ts",["130"],"D:\\react-samurai\\todolist\\src\\api\\types.ts",[],"D:\\react-samurai\\todolist\\src\\app\\selectors.ts",[],"D:\\react-samurai\\todolist\\src\\features\\Application\\application-reducer.ts",["131"],"D:\\react-samurai\\todolist\\src\\features\\Application\\index.ts",[],"D:\\react-samurai\\todolist\\src\\features\\CommonActions\\App.ts",[],{"ruleId":"132","severity":1,"message":"133","line":23,"column":11,"nodeType":"134","messageId":"135","endLine":23,"endColumn":14},{"ruleId":"132","severity":1,"message":"136","line":4,"column":9,"nodeType":"134","messageId":"135","endLine":4,"endColumn":20},{"ruleId":"137","severity":1,"message":"138","line":30,"column":8,"nodeType":"139","endLine":30,"endColumn":10,"suggestions":"140"},{"ruleId":"137","severity":1,"message":"141","line":45,"column":8,"nodeType":"139","endLine":45,"endColumn":27,"suggestions":"142"},{"ruleId":"137","severity":1,"message":"143","line":52,"column":8,"nodeType":"139","endLine":52,"endColumn":27,"suggestions":"144"},{"ruleId":"137","severity":1,"message":"145","line":56,"column":8,"nodeType":"139","endLine":56,"endColumn":27,"suggestions":"146"},{"ruleId":"147","replacedBy":"148"},{"ruleId":"149","replacedBy":"150"},{"ruleId":"147","replacedBy":"151"},{"ruleId":"149","replacedBy":"152"},{"ruleId":"137","severity":1,"message":"153","line":20,"column":8,"nodeType":"139","endLine":20,"endColumn":41,"suggestions":"154"},{"ruleId":"137","severity":1,"message":"155","line":27,"column":8,"nodeType":"139","endLine":27,"endColumn":41,"suggestions":"156"},{"ruleId":"137","severity":1,"message":"155","line":34,"column":8,"nodeType":"139","endLine":34,"endColumn":41,"suggestions":"157"},{"ruleId":"132","severity":1,"message":"158","line":2,"column":9,"nodeType":"134","messageId":"135","endLine":2,"endColumn":32},{"ruleId":"132","severity":1,"message":"159","line":2,"column":34,"nodeType":"134","messageId":"135","endLine":2,"endColumn":52},{"ruleId":"132","severity":1,"message":"136","line":7,"column":9,"nodeType":"134","messageId":"135","endLine":7,"endColumn":20},{"ruleId":"132","severity":1,"message":"160","line":8,"column":9,"nodeType":"134","messageId":"135","endLine":8,"endColumn":16},{"ruleId":"132","severity":1,"message":"161","line":9,"column":9,"nodeType":"134","messageId":"135","endLine":9,"endColumn":23},{"ruleId":"132","severity":1,"message":"133","line":29,"column":15,"nodeType":"134","messageId":"135","endLine":29,"endColumn":18},{"ruleId":"137","severity":1,"message":"141","line":41,"column":8,"nodeType":"139","endLine":41,"endColumn":10,"suggestions":"162"},{"ruleId":"137","severity":1,"message":"163","line":48,"column":8,"nodeType":"139","endLine":48,"endColumn":10,"suggestions":"164"},{"ruleId":"165","severity":1,"message":"166","line":70,"column":32,"nodeType":"167","endLine":70,"endColumn":49},{"ruleId":"137","severity":1,"message":"168","line":12,"column":8,"nodeType":"139","endLine":12,"endColumn":10,"suggestions":"169"},{"ruleId":"132","severity":1,"message":"170","line":3,"column":40,"nodeType":"134","messageId":"135","endLine":3,"endColumn":53},"@typescript-eslint/no-unused-vars","'res' is assigned a value but never used.","Identifier","unusedVar","'useDispatch' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'demo', 'fetchTasks', and 'props.todolist.id'. Either include them or remove the dependency array.","ArrayExpression",["171"],"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["172"],"React Hook useCallback has a missing dependency: 'changeTodolistTitle'. Either include it or remove the dependency array.",["173"],"React Hook useCallback has a missing dependency: 'changeTodolistFilter'. Either include it or remove the dependency array.",["174"],"no-native-reassign",["175"],"no-negated-in-lhs",["176"],["175"],["176"],"React Hook useCallback has a missing dependency: 'removeTask'. Either include it or remove the dependency array.",["177"],"React Hook useCallback has a missing dependency: 'updateTask'. Either include it or remove the dependency array.",["178"],["179"],"'ActionCreatorsMapObject' is defined but never used.","'bindActionCreators' is defined but never used.","'useMemo' is defined but never used.","'FieldErrorType' is defined but never used.",["180"],"React Hook useEffect has missing dependencies: 'demo', 'fetchTodolists', and 'isLoggedIn'. Either include them or remove the dependency array.",["181"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","React Hook useMemo has missing dependencies: 'actions' and 'dispatch'. Either include them or remove the dependency array.",["182"],"'PayloadAction' is defined but never used.",{"desc":"183","fix":"184"},{"desc":"185","fix":"186"},{"desc":"187","fix":"188"},{"desc":"189","fix":"190"},"no-global-assign","no-unsafe-negation",{"desc":"191","fix":"192"},{"desc":"193","fix":"194"},{"desc":"193","fix":"195"},{"desc":"196","fix":"197"},{"desc":"198","fix":"199"},{"desc":"200","fix":"201"},"Update the dependencies array to be: [demo, fetchTasks, props.todolist.id]",{"range":"202","text":"203"},"Update the dependencies array to be: [dispatch, props.todolist.id]",{"range":"204","text":"205"},"Update the dependencies array to be: [changeTodolistTitle, props.todolist.id]",{"range":"206","text":"207"},"Update the dependencies array to be: [changeTodolistFilter, props.todolist.id]",{"range":"208","text":"209"},"Update the dependencies array to be: [props.task.id, props.todolistId, removeTask]",{"range":"210","text":"211"},"Update the dependencies array to be: [props.task.id, props.todolistId, updateTask]",{"range":"212","text":"213"},{"range":"214","text":"213"},"Update the dependencies array to be: [dispatch]",{"range":"215","text":"216"},"Update the dependencies array to be: [demo, fetchTodolists, isLoggedIn]",{"range":"217","text":"218"},"Update the dependencies array to be: [actions, dispatch]",{"range":"219","text":"220"},[1156,1158],"[demo, fetchTasks, props.todolist.id]",[1810,1829],"[dispatch, props.todolist.id]",[2070,2089],"[changeTodolistTitle, props.todolist.id]",[2256,2275],"[changeTodolistFilter, props.todolist.id]",[730,763],"[props.task.id, props.todolistId, removeTask]",[1066,1099],"[props.task.id, props.todolistId, updateTask]",[1331,1364],[1745,1747],"[dispatch]",[1876,1878],"[demo, fetchTodolists, isLoggedIn]",[480,482],"[actions, dispatch]"]